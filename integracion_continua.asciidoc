Integración Continua
====================
Yeray Darias Camacho <ydarias@gmail.com>

Independientemente de si el equipo de desarrollo sigue una metodología 
clásica en cascada o algún tipo de metodología ágil, hay un momento decisivo
que determina el éxito del proyecto. Este momento es el despliegue de la 
aplicación en los sistemas del cliente, lo que conocemos como sistema de
producción.

Generalmente este suele ser un momento muy tenso porque es muy raro que todo
funcione a la primera. Si sigues una metodología en la que predomine el 
desarrollo iterativo, en el que las funcionalidades se van entregando poco a 
poco, se minimiza ligeramente el impacto (siempre y cuando al final de cada
iteración se haya desplegado en el sistema de producción real). Pero sigue
siendo un momento incomodo, se suelen producir errores porque las máquinas de
desarrollo tienen configuraciones diferentes a las máquina de producción, el
rendimiento no es tan bueno porque la base de datos de producción tiene una
cantidad mucho mayor de información, o cualquier otro detalle que no tuvimos en
cuenta durante el desarrollo.

Para resolver este problema aparece una nueva "filosofía", o práctica,
denominada Integración Continua. Para muchas personas la Integración Continua es
tener un servidor Jenkins o Cruise Control construyendo nuestra aplicación
continuamente. Nada más lejos de la realidad, cuando he utilizado la palabra
filosofía lo he hecho porque la Integración Continua es un modo de desarrollar
un poco diferente al habitual, y que requiere de una serie de buenas prácticas y
la aceptación de las mismas por el equipo de desarrollo. Se ha de convertir en
un hábito que se realice casi sin darnos cuenta. 

Desarrollo en un equipo que utiliza Integración continua
--------------------------------------------------------

Para que se entienda mejor el proceso completo voy a explicar como es un día
de trabajo en mi equipo de desarrollo. Así se puede comprender claramente el
proceso completo y algunas de las prácticas que el desarrollador debe tener en
mente.

Al principio del día lo normal es seleccionar la siguiente tarea más importante
a realizar. En base a la reunión de sprint y al stand-up meeting siempre existe
una lista de tareas priorizadas a disposición del equipo de desarrollo, por lo 
que es muy sencillo saber en que tengo que trabajar. Vamos a suponer en este
caso que es una nueva funcionalidad de alguna de las aplicaciones en las que
trabajamos, como en el 90% de las ocasiones.

Una vez que he vuelto a mi mesa de trabajo, actualizo el código fuente del
proyecto con la copia existente en el repositorio de código, esto me permite
estar seguro que tengo todos los cambios realizados por mis compañeros. A veces
se trata de un proyecto que no tengo en mi máquina, no hay problema, solo tengo
que descargar la versión actual del repositorio de código y ya puedo empezar a
trabajar. Cuando se utiliza un repositorio de código estas tareas son tan
transparentes que se vuelven automáticas, y en realidad es una herramienta 
indispensable para poder realizar Integración Continua.

Durante unas horas estaré trabajando en la nueva funcionalidad, aunque no
entraremos en detalle ya que no es tan relevante de cara a la Integración
Continua. En mi caso personal suelo utilizar TDD lo que me ayuda a diseñar 
un código fuente más limpio, y como resultado añadido tengo algo que es 
fundamental en la Integración Continua, una batería de tests automatizados que 
puedo ejecutar en cualquier momento para verificar que la implementación
realizada funciona correctamente. Aunque los tests no sean infalibles al 100% 
son una herramienta fantástica para reducir los errores inherentes al proceso
de desarrollo. Además estos tests permiten a mis compañeros saber si alguno de
sus cambios ha afectado a la funcionalidad que yo he implementado.

Cuando la funcionalidad está terminada, actualizo el código fuente con los
cambios de mis compañeros y me aseguro que la aplicación sigue construyéndose
correctamente, y que los tests del proyecto están en verde, es decir que pasan
todos sin ningún problema. Si por el contrario aparece algún error, lo arreglo
inmediatamente. Nunca, bajo ningún concepto se debe subir código al repositorio
sin revisar que los tests pasan correctamente y la aplicación se puede construir
sin incidencias. Además es recomendable acceder a la aplicación y revisar 
rápidamente que todo sigue funcionando adecuadamente. Por lo general los tests
unitarios no tienen una cobertura del 100% o simplemente no pueden probar
detalles de infraestructura que son más sencillos de probar a mano. Hecho esto
puedo hacer un commit y guardar mis cambios en el repositorio de código, lo que
permite que mis compañeros se actualicen y los tengan disponibles en cuestión de
segundos.

Es el momento en el que hago el commit cuando el servidor de Integración
Continua comienza a trabajar, aunque en realidad el proceso de Integración
Continua ya ha empezado desde el primer paso. El servidor de Integración se 
descargará una versión nueva del código fuente, con los todos los cambios
llevados a cabo por el equipo de desarrollo, pasará los tests y tras hacer
la construcción el proyecto lo desplegará en una "réplica" de la máquina de
producción. Todo de forma totalmente automatizada. El propio de servidor de
Integración Continua podría pasar algunas pruebas extras, como por ejemplo
análisis estático de código, análisis de cobertura, o cualquier otro detalle que
sería muy tedioso pasar en el proceso de desarrollo porque requiere demasiado
tiempo.

Ventajas de la Integración Continua
-----------------------------------

(Reducción del número de bugs en producción, incluyendo el poco tiempo que pasa
entre que se comete el error y la detección del mismo)

(Transparencia y propiedad colectiva del código)

Elementos indispensables de la Integración Continua
---------------------------------------------------

(Repositorio de código)

(Automatización del proceso)

(Existencia de una batería de pruebas unitarias)

Un paso más allá
----------------
(Análisis estático de código)

(Prueba de integración de alto nivel)

Para acabar me gustaría utilizar algunos comentarios escuchados por Martin
Fowler cuando habla de Integración Continua con otros desarrolladores. La
primera reacción suele ser algo como "eso no puede funcionar (aquí)" o "haciendo
eso no cambiará mucho las cosas", pero hay otra muy distinta que es "sí,
nosotros lo hacemos - ¿cómo puedes vivir sin eso?". Ahora es tu elección si 
decides probarlo o no, pero antes de hacerlo piensa en lo poco que tienes que 
perder y lo mucho que puedes ganar.

[bibliography]
Bibliografía
------------
- [[[continuosintegration]]] Paul M Duvall 'Continuos Integration: Improving
  Software Quality and Reducing Risk' ISBN 978-0321336385
- [[[continuosdelivery]]] Jez Humble and David Farley 'Continuos Delivery'  
  Addison-Wesley Professional ISBN 978-0321601919
- [[[cifowler]]] Martin Fowler 'Continuous Integration' 
  http://www.martinfowler.com/articles/continuousIntegration.html
- [[[xpexplained]]] Kent Beck and Cynthia Andres 'Extreme Programming Explained:
  Embrace Change (2nd Edition)' ISBN 978-0321278654
- [[[]]] Carlos Blé Jurado 'Diseño Ágil con TDD' ISBN 978-1445264714