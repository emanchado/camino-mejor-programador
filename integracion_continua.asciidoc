Integración Continua
====================
Yeray Darias Camacho <ydarias@gmail.com>

Independientemente de si el equipo de desarrollo sigue una metodología 
clásica en cascada o algún tipo de metodología ágil, hay un momento decisivo
que determina el éxito del proyecto. Este momento es el despliegue de la 
aplicación en los sistemas del cliente, lo que conocemos como sistema de
producción.

Generalmente este suele ser un momento muy tenso porque es muy raro que todo
funcione a la primera. Si sigues una metodología en la que predomine el 
desarrollo iterativo, en el que las funcionalidades se van entregando poco a 
poco, se minimiza ligeramente el impacto (siempre y cuando al final de cada
iteración se haya desplegado en el sistema de producción real), pero sigue
siendo un momento incomodo. Se suelen producir errores porque las máquinas de
desarrollo tienen configuraciones diferentes a las máquina de producción, el
rendimiento no es tan bueno porque la base de datos de producción tiene una
cantidad mucho mayor de información, o cualquier otro detalle que no tuvimos en
cuenta durante el desarrollo.

Para resolver este problema aparece una nueva "filosofía", o práctica,
denominada Integración Continua. Para muchas personas la Integración Continua es
tener un servidor Jenkins o Cruise Control construyendo nuestra aplicación
continuamente. Nada más lejos de la realidad, cuando he utilizado la palabra
filosofía lo he hecho porque la Integración Continua es un modo de desarrollar
un poco diferente al habitual, y que requiere de una serie de buenas prácticas y
la aceptación de las mismas por el equipo de desarrollo. Se ha de convertir en
un hábito que se realice casi sin darnos cuenta.

Desarrollo en un equipo que utiliza Integración continua
--------------------------------------------------------

Para que se entienda mejor el proceso completo voy a explicar como es un día
de trabajo en mi equipo de desarrollo. Así se puede entender claramente el
proceso completo y algunas de las prácticas que le desarrollador debe tener en
mente.

[Elección de la próxima tarea más importante]

[Descarga del código fuente o actualización del mismo desde el repositorio]

[Implementación de la nueva funcionalidad, incluyendo tests]

[Actualización del código y corrección de posibles problemas, asegurándome 
de pasar los tests y revisando que se construye correctamente]

[Commit de los cambios]

[Proceso interno del servidor de IC]

Construcción automatizada y servidor de Integración Continua
------------------------------------------------------------
La base principal de la Integración Continua es la automatización de todo
proceso repetitivo que conlleve la construcción de nuestro sistema, desde la 
compilación del código, hasta el despliegue en el servidor de desarrollo o de 
producción. En medio se pueden dar más o menos pasos, como por ejemplo realizar
análisis estático de código, pruebas de integración de alto nivel o pruebas de
carga, entre otras. Pero hay otros pasos que consideraría obligatorios como por
ejemplo la ejecución de los tests unitarios automatizados.

(Introducir en este bloque una referencia a la construcción de forma 
continua, lo antes posible y la necesidad de hacer commits atómicos y 
frecuentes)

Pruebas automatizadas
---------------------
Aunque lográramos crear nuestro servidor de Integración Continua y 
automatizáramos todo el proceso de construcción, no es muy útil si tenemos en
cuenta que un sistema que compila y se instala correctamente en el servidor, no 
es necesariamente un sistema que funciona como el cliente desea o incluso, en 
algunos casos, que funciona.

En capítulos anteriores del libro se ha hablado de las pruebas unitarias y del
desarrollo dirigido por tests, si incluimos estos tests

Un paso más allá
----------------
(Análisis estático de código)

(Prueba de integración de alto nivel)

Comunicación del proceso y propiedad colectiva del código
---------------------------------------------------------
(Buscar la forma de enlazar el artículo con la propiedad colectiva del código,
recalcando que la responsabilidad de que el servidor de integración continua
esté continuamente en verde es de todo el equipo)

...

Para acabar me gustaría utilizar algunos comentarios escuchados por Martin
Fowler cuando habla de Integración Continua con otros desarrolladores. La
primera reacción suele ser algo como "eso no puede funcionar (aquí)" o "haciendo
eso no cambiará mucho las cosas", pero hay otra muy distinta que es "sí,
nosotros lo hacemos - ¿cómo puedes vivir sin eso?". Ahora es tu elección si 
decides probarlo o no, pero antes de hacerlo piensa en lo poco que tienes que 
perder y lo mucho que puedes ganar.

[bibliography]
Bibliografía
------------
- [[[continuosintegration]]] Paul M Duvall 'Continuos Integration: Improving
  Software Quality and Reducing Risk' ISBN 978-0321336385
- [[[continuosdelivery]]] Jez Humble and David Farley 'Continuos Delivery'  
  Addison-Wesley Professional ISBN 978-0321601919
- [[[cifowler]]] Martin Fowler 'Continuous Integration' 
  http://www.martinfowler.com/articles/continuousIntegration.html
- [[[xpexplained]]] Kent Beck and Cynthia Andres 'Extreme Programming Explained:
  Embrace Change (2nd Edition)' ISBN 978-0321278654
- [[[]]] Carlos Blé Jurado 'Diseño Ágil con TDD' ISBN 978-1445264714